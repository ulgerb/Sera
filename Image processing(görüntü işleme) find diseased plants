//3-Esp32 Görüntü İşleme Ek:

// Wifi bağlanma
const char* ssid = ".............."; //Wi-Fi
const char* password = "..............."; //Wi-Fi
const char* apssid = "ESP32-CAM"; //WiFi IP
const char* appassword = "12345678"; //AP
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include "esp_camera.h"
#include "soc/soc.h"
#include "soc/rtc_cntl_reg.h"

//Esp-32 modül girişleri.
String Feedback="";
String Command="",cmd="",P1="",P2="",P3="",P4="",P5="",P6="",P7="",P8="",P9="";
byte ReceiveState=0,cmdState=1,strState=1,questionstate=0,equalstate=0,semicolonstate=0;
#define PWDN_GPIO_NUM 32
#define RESET_GPIO_NUM -1
#define XCLK_GPIO_NUM 0
#define SIOD_GPIO_NUM 26
#define SIOC_GPIO_NUM 27
#define Y9_GPIO_NUM 35
#define Y8_GPIO_NUM 34
#define Y7_GPIO_NUM 39
#define Y6_GPIO_NUM 36
#define Y5_GPIO_NUM 21
#define Y4_GPIO_NUM 19
#define Y3_GPIO_NUM 18
#define Y2_GPIO_NUM 5
#define VSYNC_GPIO_NUM 25
#define HREF_GPIO_NUM 23
#define PCLK_GPIO_NUM 22

WiFiServer server(80);
void ExecuteCommand(){
//Serial.println("");
//Serial.println("Command: "+Command);
if (cmd!="getstill") {
Serial.println("cmd= "+cmd+" ,P1= "+P1+" ,P2= "+P2+" ,P3= "+P3+" ,P4= "+P4+" ,P5=
"+P5+" ,P6= "+P6+" ,P7= "+P7+" ,P8= "+P8+" ,P9= "+P9);
Serial.println(""); }
if (cmd=="ip") {
Feedback="AP IP: "+WiFi.softAPIP().toString();
Feedback+=", ";
Feedback+="STA IP: "+WiFi.localIP().toString(); }
else if (cmd=="mac") {
Feedback="STA MAC: "+WiFi.macAddress(); }
else if (cmd=="resetwifi") { //WIFI
WiFi.begin(P1.c_str(), P2.c_str());
Serial.print("Connecting to ");
Serial.println(P1);
long int StartTime=millis();
while (WiFi.status() != WL_CONNECTED) {
delay(500);

// Esp-32 kamera modülü başlangıç değerleri ve atamalar
if ((StartTime+5000) < millis()) break; }
Serial.println("");
Serial.println("STAIP: "+WiFi.localIP().toString());
Feedback="STAIP: "+WiFi.localIP().toString(); }
else if (cmd=="restart") {
ESP.restart(); }
else if (cmd=="digitalwrite") {
ledcDetachPin(P1.toInt());
pinMode(P1.toInt(), OUTPUT);
digitalWrite(P1.toInt(), P2.toInt());
}
else if (cmd=="analogwrite") {
if (P1="4") {
ledcAttachPin(4, 4);
ledcSetup(4, 5000, 8);
ledcWrite(4,P2.toInt());
}
else {
ledcAttachPin(P1.toInt(), 5);
ledcSetup(5, 5000, 8);
ledcWrite(5,P2.toInt()); }
}
else if (cmd=="flash") {
ledcAttachPin(4, 4);
ledcSetup(4, 5000, 8);

int val = P1.toInt();
ledcWrite(4,val);
}
//Kamera piksel ayarları
else if (cmd=="framesize") {
sensor_t * s = esp_camera_sensor_get();
if (P1=="QQVGA")
s->set_framesize(s, FRAMESIZE_QQVGA);
else if (P1=="HQVGA")
s->set_framesize(s, FRAMESIZE_HQVGA);
else if (P1=="QVGA")
s->set_framesize(s, FRAMESIZE_QVGA);
else if (P1=="CIF")
s->set_framesize(s, FRAMESIZE_CIF);
else if (P1=="VGA")
s->set_framesize(s, FRAMESIZE_VGA);
else if (P1=="SVGA")
s->set_framesize(s, FRAMESIZE_SVGA);
else if (P1=="XGA")
s->set_framesize(s, FRAMESIZE_XGA);
else if (P1=="SXGA")
s->set_framesize(s, FRAMESIZE_SXGA);
else if (P1=="UXGA")
s->set_framesize(s, FRAMESIZE_UXGA);
else
s->set_framesize(s, FRAMESIZE_VGA);
}
//kamera görüntü parlaklık ve contrast ayarları
else if (cmd=="quality") {
sensor_t * s = esp_camera_sensor_get();
int val = P1.toInt();
s->set_quality(s, val);
}
else if (cmd=="contrast") {
sensor_t * s = esp_camera_sensor_get();
int val = P1.toInt();
s->set_contrast(s, val);
}
else if (cmd=="brightness") {
sensor_t * s = esp_camera_sensor_get();
int val = P1.toInt();
s->set_brightness(s, val);
}
else if (cmd=="detectCount") {
Serial.println(P1+" = "+P2);
}
else if (cmd=="serial") {
if (P1!=""&P1!="stop") Serial.println(P1);
if (P2!=""&P2!="stop") Serial.println(P2);
if (P3!=""&P3!="stop") Serial.println(P3);
if (P4!=""&P4!="stop") Serial.println(P4);
if (P5!=""&P5!="stop") Serial.println(P5);
if (P6!=""&P6!="stop") Serial.println(P6);
if (P7!=""&P7!="stop") Serial.println(P7);
if (P8!=""&P8!="stop") Serial.println(P8);
if (P9!=""&P9!="stop") Serial.println(P9);
Serial.println(); }
else {
Feedback="Command is not defined."; }
if (Feedback=="") Feedback=Command; }
void setup() {
WRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);
Serial.begin(115200);
Serial.setDebugOutput(true);
Serial.println();
camera_config_t config;
config.ledc_channel = LEDC_CHANNEL_0;
config.ledc_timer = LEDC_TIMER_0;
config.pin_d0 = Y2_GPIO_NUM;
config.pin_d1 = Y3_GPIO_NUM;
config.pin_d2 = Y4_GPIO_NUM;
config.pin_d3 = Y5_GPIO_NUM;
config.pin_d4 = Y6_GPIO_NUM;
config.pin_d5 = Y7_GPIO_NUM;
config.pin_d6 = Y8_GPIO_NUM;
config.pin_d7 = Y9_GPIO_NUM;
config.pin_xclk = XCLK_GPIO_NUM;
config.pin_pclk = PCLK_GPIO_NUM;
config.pin_vsync = VSYNC_GPIO_NUM;
config.pin_href = HREF_GPIO_NUM;
config.pin_sscb_sda = SIOD_GPIO_NUM;
config.pin_sscb_scl = SIOC_GPIO_NUM;
config.pin_pwdn = PWDN_GPIO_NUM;
config.pin_reset = RESET_GPIO_NUM;
config.xclk_freq_hz = 20000000;
config.pixel_format = PIXFORMAT_JPEG;
if(psramFound()){
config.frame_size = FRAMESIZE_UXGA;
config.jpeg_quality = 10;
config.fb_count = 2; } else {
config.frame_size = FRAMESIZE_SVGA;
config.jpeg_quality = 12;
config.fb_count = 1; }
// camera init
esp_err_t err = esp_camera_init(&config);
if (err != ESP_OK) {
Serial.printf("Camera init failed with error 0x%x", err);
delay(1000);
ESP.restart(); }
sensor_t * s = esp_camera_sensor_get();
s->set_framesize(s, FRAMESIZE_VGA);
ledcAttachPin(4, 4);
ledcSetup(4, 5000, 8);
WiFi.mode(WIFI_AP_STA);
WiFi.begin(ssid, password);
delay(1000);
Serial.println("");
Serial.print("Connecting to ");
Serial.println(ssid);

long int StartTime=millis();
while (WiFi.status() != WL_CONNECTED)
{
delay(500);
if ((StartTime+10000) < millis()) break;
}
if (WiFi.status() == WL_CONNECTED) {
WiFi.softAP((WiFi.localIP().toString()+""+(String)apssid).c_str(), appassword); //IP
Serial.println("");
Serial.println("STAIP address: ");
Serial.println(WiFi.localIP());
for (int i=0;i<5;i++) {
ledcWrite(4,10);
delay(200);
ledcWrite(4,0);
delay(200);
} }
else {
WiFi.softAP((WiFi.softAPIP().toString()+""+(String)apssid).c_str(), appassword);
for (int i=0;i<2;i++) {
ledcWrite(4,10);
delay(1000);
ledcWrite(4,0);
delay(1000);
} }
Serial.println("");
Serial.println("APIP address: ");
Serial.println(WiFi.softAPIP());
pinMode(4, OUTPUT);
digitalWrite(4, LOW);
server.begin();
}
// HTML internet sayfası ayarlamaları. (192.168.1.1)
static const char PROGMEM INDEX_HTML[] = R"rawliteral(

<title>tracking.js - color with camera</title> <script src="https:\/\/ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js"></script> <script src="https:\/\/fustyles.github.io/webduino/Tracking_20190917/tracking�min.js"></script>


Berkay Sera Kamera Sstemi
Hastalık
Pixel Göster
(Sarı Yaprak Tespiti)	(Hastalık 2)	(Hastalık 3)
R	min205
max255
G	min186
max236
B	min165
max185
R	min210
max230
G	min215
max235
B	min210
max230
R	min0
max0
G	min0
max0
B	min0
max0
Flash	
Quality	
Brightness	
Contrast	
Resolution	UXGA(1600x1200) SXGA(1280x1024) XGA(1024x768) SVGA(800x600) VGA(640x480) CIF(400x296) QVGA(320x240) HQVGA(240x176) QQVGA(160x120)
MirrorImage	Y N
Rotate	0deg 90deg 180deg 270deg
<script> var getStill = document.getElementById('getStill'); var ShowImage = document.getElementById('ShowImage'); var canvas = document.getElementById("canvas"); var context = canvas.getContext("2d"); var canvas_custom = document.getElementById('canvas_custom'); var context_custom = canvas_custom.getContext('2d'); var myColor = document.getElementById('myColor'); var mirrorimage = document.getElementById("mirrorimage"); var result = document.getElementById('result'); var red = document.getElementById('red'); var green = document.getElementById('green'); var blue = document.getElementById('blue'); var magenta = document.getElementById('magenta'); var cyan = document.getElementById('cyan'); var yellow = document.getElementById('yellow'); var flash = document.getElementById('flash'); var myTimer; var restartCount=0; var myColor_r_min1,myColor_r_max1,myColor_g_min1,myColor_g_max1,myColor_b_min1,m yColor_b_max1; var myColor_r_min2,myColor_r_max2,myColor_g_min2,myColor_g_max2,myColor_b_min2,m yColor_b_max2; var myColor_r_min3,myColor_r_max3,myColor_g_min3,myColor_g_max3,myColor_b_min3,m yColor_b_max3; var tracker = new tracking.ColorTracker(); tracking.ColorTracker.registerColor('red', function(r, g, b) { if ((r>=myColor_r_min1&&r<=myColor_r_max1)&&(g>=myColor_g_min1&&g<=myColor_ g_max1)&&(b>=myColor_b_min1&&b<=myColor_b_max1)) { return true; } return false; }); tracking.ColorTracker.registerColor('green', function(r, g, b) { if ((r>=myColor_r_min2&&r<=myColor_r_max2)&&(g>=myColor_g_min2&&g<=myColor_ g_max2)&&(b>=myColor_b_min2&&b<=myColor_b_max2)) { return true; } return false; }); tracking.ColorTracker.registerColor('blue', function(r, g, b) { if ((r>=myColor_r_min3&&r<=myColor_r_max3)&&(g>=myColor_g_min3&&g<=myColor_ g_max3)&&(b>=myColor_b_min3&&b<=myColor_b_max3)) { return true; } return false; }); var trackedColors = { custom: true }; Object.keys(tracking.ColorTracker.knownColors_).forEach(function(color) { trackedColors[color] = true; }); var colors = []; for (var color in trackedColors) { if (trackedColors[color]) { colors.push(color); } } tracker.setColors(colors); function changeTab(tab) { if (tab=='red') divColor1.style.display="block"; else divColor1.style.display="none"; if (tab=='green') divColor2.style.display="block"; else divColor2.style.display="none"; if (tab=='blue') divColor3.style.display="block"; else divColor3.style.display="none"; } getStill.onclick = function (event) { clearInterval(myTimer); myTimer = setInterval(function(){error_handle();},5000); ShowImage.src=location.origin+'/?getstill='+Math.random(); } function error_handle() { restartCount++; clearInterval(myTimer); if (restartCount<=2) { result.innerHTML = "HATA.
Restart ESP32-CAM "+restartCount+" times."; myTimer = setInterval(function(){getStill.click();},10000); } else result.innerHTML = "HATA.
Lutfen modulu kapatın ESP32-CAM."; } ShowImage.onload = function (event) { clearInterval(myTimer); restartCount=0; canvas.setAttribute("width", ShowImage.width); canvas.setAttribute("height", ShowImage.height); canvas_custom.setAttribute("width", ShowImage.width); canvas_custom.setAttribute("height", ShowImage.height); if (mirrorimage.value==1) { context.translate((canvas.width + ShowImage.width) / 2, 0); context.scale(-1, 1); context.drawImage(ShowImage, 0, 0, ShowImage.width, ShowImage.height); context.setTransform(1, 0, 0, 1, 0, 0); } else context.drawImage(ShowImage,0,0,ShowImage.width,ShowImage.height); myColor_r_min1 = document.getElementById('myColor_r_min1').value; myColor_r_max1 = document.getElementById('myColor_r_max1').value; myColor_g_min1 = document.getElementById('myColor_g_min1').value; myColor_g_max1 = document.getElementById('myColor_g_max1').value; myColor_b_min1 = document.getElementById('myColor_b_min1').value; myColor_b_max1 = document.getElementById('myColor_b_max1').value; myColor_r_min2 = document.getElementById('myColor_r_min2').value; myColor_r_max2 = document.getElementById('myColor_r_max2').value; myColor_g_min2 = document.getElementById('myColor_g_min2').value; myColor_g_max2 = document.getElementById('myColor_g_max2').value; myColor_b_min2 = document.getElementById('myColor_b_min2').value; myColor_b_max2 = document.getElementById('myColor_b_max2').value; myColor_r_min3 = document.getElementById('myColor_r_min3').value; myColor_r_max3 = document.getElementById('myColor_r_max3').value; myColor_g_min3 = document.getElementById('myColor_g_min3').value; myColor_g_max3 = document.getElementById('myColor_g_max3').value; myColor_b_min3 = document.getElementById('myColor_b_min3').value; myColor_b_max3 = document.getElementById('myColor_b_max3').value; var imgData=context.getImageData(0,0,canvas.width,canvas.height); for (var i=0;i=myColor_r_min1&&imgData.data[i]<=myColor_r_max1)&&(imgData.d ata[i+1]>=myColor_g_min1&&imgData.data[i+1]<=myColor_g_max1)&&(imgData.data[i+ 2]>=myColor_b_min1&&imgData.data[i+2]<=myColor_b_max1)) { r=255; } if ((imgData.data[i]>=myColor_r_min2&&imgData.data[i]<=myColor_r_max2)&&(imgData.d ata[i+1]>=myColor_g_min2&&imgData.data[i+1]<=myColor_g_max2)&&(imgData.data[i+ 2]>=myColor_b_min2&&imgData.data[i+2]<=myColor_b_max2)) { g=255; } if ((imgData.data[i]>=myColor_r_min3&&imgData.data[i]<=myColor_r_max3)&&(imgData.d ata[i+1]>=myColor_g_min3&&imgData.data[i+1]<=myColor_g_max3)&&(imgData.data[i+ 2]>=myColor_b_min3&&imgData.data[i+2]<=myColor_b_max3)) { b=255; } imgData.data[i]=r; imgData.data[i+1]=g; imgData.data[i+2]=b; imgData.data[i+3]=255; } context_custom.putImageData(imgData,0,0); tracking.track('#canvas', tracker); try { document.createEvent("TouchEvent"); setTimeout(function(){getStill.click();},250); } catch(e) { setTimeout(function(){getStill.click();},150); } } tracker.on('track', function(event) { result.innerHTML = ""; red.innerHTML = ""; green.innerHTML = ""; blue.innerHTML = ""; magenta.innerHTML = ""; cyan.innerHTML = ""; yellow.innerHTML = ""; event.data.forEach(function(rect) { context.strokeStyle = rect.color; context.strokeRect(rect.x, rect.y, rect.width, rect.height); //context.font = '11px Helvetica'; //context.fillStyle = "#fff"; //context.fillText('x: ' + rect.x + 'px', rect.x + rect.width + 5, rect.y + 11); //context.fillText('y: ' + rect.y + 'px', rect.x + rect.width + 5, rect.y + 22); ";stop" $.ajax({url:document.location.origin+'?serial='+rect.color+";"+rect.x+";"+rect.y+";"+rect.wid th+";"+rect.height+';stop', async: false}); result.innerHTML+= rect.color+","+rect.x+","+rect.y+","+rect.width+","+rect.height+"
"; if (rect.color=="red") { red.innerHTML+= rect.color+","+rect.x+","+rect.y+","+rect.width+","+rect.height+";"; } else if (rect.color=="green") { green.innerHTML+= rect.color+","+rect.x+","+rect.y+","+rect.width+","+rect.height+";"; } else if (rect.color=="blue") { blue.innerHTML+= rect.color+","+rect.x+","+rect.y+","+rect.width+","+rect.height+";"; } else if (rect.color=="magenta") { magenta.innerHTML+= rect.color+","+rect.x+","+rect.y+","+rect.width+","+rect.height+";"; } else if (rect.color=="cyan") { cyan.innerHTML+= rect.color+","+rect.x+","+rect.y+","+rect.width+","+rect.height+";"; } else if (rect.color=="yellow") { yellow.innerHTML+= rect.color+","+rect.x+","+rect.y+","+rect.width+","+rect.height+";"; } }); }); restart.onclick = function (event) { fetch(location.origin+'?restart=stop'); } framesize.onclick = function (event) { fetch(document.location.origin+'?framesize='+this.value+';stop'); } flash.onchange = function (event) { fetch(location.origin+'?flash='+this.value+';stop'); } quality.onclick = function (event) { fetch(document.location.origin+'?quality='+this.value+';stop'); } brightness.onclick = function (event) { fetch(document.location.origin+'?brightness='+this.value+';stop'); } contrast.onclick = function (event) { fetch(document.location.origin+'?contrast='+this.value+';stop'); } function getFeedback(target) { var data = $.ajax({ type: "get", dataType: "text", url: target, success: function(response) { result.innerHTML = response; }, error: function(exception) { result.innerHTML = 'fail'; } }); } </script>
)rawliteral";
void loop() {
Feedback="";Command="";cmd="";P1="";P2="";P3="";P4="";P5="";P6="";P7="";P8="";P9
="";
ReceiveState=0,cmdState=1,strState=1,questionstate=0,equalstate=0,semicolonstate=0;

WiFiClient client = server.available();
if (client) {
String currentLine = "";
while (client.connected()) {
if (client.available()) {
char c = client.read();
getCommand(c);

if (c == '\n') {
if (currentLine.length() == 0) {

if (cmd=="getstill") {

camera_fb_t * fb = NULL;
fb = esp_camera_fb_get();
if(!fb) {
Serial.println("Camera capture failed");
delay(1000);
ESP.restart();
}

client.println("HTTP/1.1 200 OK");
client.println("Access-Control-Allow-Origin: *");
client.println("Access-Control-Allow-Headers: Origin, X-Requested-With, Content�Type, Accept");
client.println("Access-Control-Allow-Methods:
GET,POST,PUT,DELETE,OPTIONS");
client.println("Content-Type: image/jpeg");
client.println("Content-Disposition: form-data; name="imageFile";
filename="picture.jpg"");
client.println("Content-Length: " + String(fb->len));
client.println("Connection: close");
client.println();

uint8_t *fbBuf = fb->buf;
size_t fbLen = fb->len;
for (size_t n=0;n<fbLen;n=n+1024) {
if (n+1024<fbLen) {
client.write(fbBuf, 1024);
fbBuf += 1024;
}
else if (fbLen%1024>0) {
size_t remainder = fbLen%1024;
client.write(fbBuf, remainder);
}
}

esp_camera_fb_return(fb);

pinMode(4, OUTPUT);
digitalWrite(4, LOW);
}
else {
//HTML
client.println("HTTP/1.1 200 OK");
client.println("Access-Control-Allow-Headers: Origin, X-Requested-With, Content�Type, Accept");
client.println("Access-Control-Allow-Methods:
GET,POST,PUT,DELETE,OPTIONS");
client.println("Content-Type: text/html; charset=utf-8");
client.println("Access-Control-Allow-Origin: *");
client.println("Connection: close");
client.println();

String Data="";
if (cmd!="")
Data = Feedback;
else {
Data = String((const char *)INDEX_HTML);
}
int Index;
for (Index = 0; Index < Data.length(); Index = Index+1000) {
client.print(Data.substring(Index, Index+1000));
}
client.println();
}
Feedback="";
break;
} else {
currentLine = "";
}
}
else if (c != '\r') {
currentLine += c;
}
if ((currentLine.indexOf("/?")!=-1)&&(currentLine.indexOf(" HTTP")!=-1)) {
if (Command.indexOf("stop")!=-1) {
client.println();
client.println();
client.stop();
}
currentLine="";
Feedback="";
ExecuteCommand();
}
}
}
delay(1);
client.stop();
}
}
void getCommand(char c)
{
if (c=='?') ReceiveState=1;
if ((c==' ')||(c=='\r')||(c=='\n')) ReceiveState=0;

if (ReceiveState==1)
{
Command=Command+String(c);

if (c=='=') cmdState=0;
if (c==';') strState++;

if ((cmdState==1)&&((c!='?')||(questionstate==1))) cmd=cmd+String(c);
if ((cmdState==0)&&(strState==1)&&((c!='=')||(equalstate==1))) P1=P1+String(c);
if ((cmdState==0)&&(strState==2)&&(c!=';')) P2=P2+String(c);
if ((cmdState==0)&&(strState==3)&&(c!=';')) P3=P3+String(c);
if ((cmdState==0)&&(strState==4)&&(c!=';')) P4=P4+String(c);
if ((cmdState==0)&&(strState==5)&&(c!=';')) P5=P5+String(c);
if ((cmdState==0)&&(strState==6)&&(c!=';')) P6=P6+String(c);
if ((cmdState==0)&&(strState==7)&&(c!=';')) P7=P7+String(c);
if ((cmdState==0)&&(strState==8)&&(c!=';')) P8=P8+String(c);
if ((cmdState==0)&&(strState>=9)&&((c!=';')||(semicolonstate==1))) P9=P9+String(c);
if (c=='?') questionstate=1;
if (c=='=') equalstate=1;
if ((strState>=9)&&(c==';')) semicolonstate=1;
}
